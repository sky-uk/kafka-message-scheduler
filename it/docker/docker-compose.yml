services:
  kafka-message-scheduler:
    image: ${CONTAINER_REPOSITORY}/kafka-message-scheduler:latest<localBuild>
    restart: "on-failure"
    ports:
      - "9401:9401"
      - "5000:5000"
    environment:
      OTEL_METRICS_EXPORTER: prometheus
      OTEL_EXPORTER_PROMETHEUS_PORT: 9401
      OTEL_SERVICE_NAME: kafka-message-scheduler
      OTEL_INSTRUMENTATION_GRPC_ENABLED: 'false'
      OTEL_TRACES_EXPORTER: 'none'
      OTEL_LOGS_EXPORTER: 'none'
      OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'grpc'
      KAFKA_BROKERS: 'kafka:9092'
      KMS_LOGGING_LOGSTASH: 'true'
      KMS_LOGGING_LEVEL: INFO
      KMS_ROOT_LOGGING_LEVEL: INFO
      JAVA_TOOL_OPTIONS:
        -Dscheduler.topics.avro.0=avro-schedules
        -Dscheduler.topics.json.0=json-schedules
        -XX:+UseG1GC
        -XX:+AlwaysPreTouch
        -Xms4g
        -Xmx4g
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.port=5000
        -Dcom.sun.management.jmxremote.rmi.port=5000
        -Djava.rmi.server.hostname=127.0.0.1

    depends_on:
      init-topics:
        condition: service_completed_successfully

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 5s
      timeout: 5s
      retries: 10

  # Create the input topics
  init-topics:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: sh
    command:
      - -c
      - >
        kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic avro-schedules &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic json-schedules

#  http://localhost:9090/ - Uncomment to expose Prometheus for local metrics testing.
#  prometheus:
#    image: prom/prometheus:latest
#    command: --config.file=/etc/prometheus/prometheus.yml
#    volumes:
#      - ${PWD}/docker/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"

# http://localhost:8080/ - Uncomment to expose AKHQ for viewing Kafka topic contents.
#  akhq:
#    image: tchiotludo/akhq:latest
#    ports:
#      - "8080:8080"
#    volumes:
#      - ${PWD}/docker/akhq.yml:/app/application.yml
#    depends_on:
#      kafka:
#        condition: service_healthy
