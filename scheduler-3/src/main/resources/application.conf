scheduler.reader {
  schedule-topics = [${?SCHEDULE_TOPICS}]
  topics {
    avro = [${?AVRO_SCHEDULE_TOPICS}]
    json = [${?JSON_SCHEDULE_TOPICS}]
  }
  kafka-brokers = "localhost:9092"
  kafka-brokers = ${?KAFKA_BROKERS}
}

kafka {
  consumer {
    bootstrap-servers = ${scheduler.reader.kafka-brokers}
    properties = {
      "group.id": "com.sky.kafka.scheduler"
      "group.id": ${?CONSUMER_GROUP_ID}
      "auto.offset.reset": "earliest"
      "security.protocol": PLAINTEXT
      "security.protocol": ${?SECURITY_PROTOCOL}
      "ssl.keystore.location": ${?KEYSTORE_LOCATION}
      "ssl.keystore.password": ${?KEYSTORE_PASSWORD}
      "ssl.truststore.location": ${?TRUSTSTORE_LOCATION}
      "ssl.truststore.password": ${?TRUSTSTORE_PASSWORD}
      "ssl.endpoint.identification.algorithm": ""
    }
  }

  producer {
    bootstrap-servers = ${scheduler.reader.kafka-brokers}
    properties = {
      "buffer.memory": 80000000
      "batch.size": 500000
      "linger.ms": 100
      "security.protocol": PLAINTEXT
      "security.protocol": ${?SECURITY_PROTOCOL}
      "ssl.keystore.location": ${?KEYSTORE_LOCATION}
      "ssl.keystore.password": ${?KEYSTORE_PASSWORD}
      "ssl.truststore.location": ${?TRUSTSTORE_LOCATION}
      "ssl.truststore.password": ${?TRUSTSTORE_PASSWORD}
      "ssl.endpoint.identification.algorithm": ""
    }
  }

  commit {
    max-batch = 250
    max-interval = 10 seconds
  }
}