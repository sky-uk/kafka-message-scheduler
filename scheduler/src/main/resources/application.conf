scheduler {
  schedule-topic = ${?SCHEDULE_TOPIC}
  kafka-brokers = "localhost:9092"
  kafka-brokers = ${?KAFKA_BROKERS}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "WARNING"
  loglevel = ${?KMS_LOGGING_LEVEL}
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  kafka {
    consumer {
      poll-interval = 50ms
      poll-timeout = 50ms
      stop-timeout = 30s
      close-timeout = 20s
      commit-timeout = 15s
      wakeup-timeout = 3s
      max-wakeups = 10
      use-dispatcher = "akka.kafka.default-dispatcher"

      kafka-clients {
        // to allow us to consume from the beginning on every restart
        enable.auto.commit = false
        auto.offset.reset = "earliest"
        group.id = "com.sky.kafka.scheduler"
        bootstrap.servers = ${scheduler.kafka-brokers}

        security.protocol = PLAINTEXT
        security.protocol = ${?SECURITY_PROTOCOL}
        ssl {
          keystore {
            location = ${?KEYSTORE_LOCATION}
            password = ${?KEYSTORE_PASSWORD}
          }
          truststore {
            location = ${?TRUSTSTORE_LOCATION}
            password = ${?TRUSTSTORE_PASSWORD}
          }
        }

      }
    }

    producer {
      parallelism = 100
      close-timeout = 60s
      use-dispatcher = "akka.kafka.default-dispatcher"

      kafka-clients {
        bootstrap.servers = ${scheduler.kafka-brokers}

        security.protocol = PLAINTEXT
        security.protocol = ${?SECURITY_PROTOCOL}
        ssl {
          keystore {
            location = ${?KEYSTORE_LOCATION}
            password = ${?KEYSTORE_PASSWORD}
          }
          truststore {
            location = ${?TRUSTSTORE_LOCATION}
            password = ${?TRUSTSTORE_PASSWORD}
          }
        }

      }
    }
  }
}

kamon {
  util.filters {
    "kms-actors" {
      includes = ["kafka-message-scheduler/**"]
    }
  }

  akka.actor-groups = ["kms-actors"]
  reporters = ["kamon.prometheus.PrometheusReporter"]
  prometheus.embedded-server {
    hostname = 0.0.0.0
    port = 9095
    port = ${?PROMETHEUS_SCRAPING_ENDPOINT_PORT}
  }
  system-metrics.host.enabled = false
}